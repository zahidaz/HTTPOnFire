package com.azzahid.hof.ui.viewmodel.route

import android.net.Uri
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.azzahid.hof.data.repository.RouteRepository
import com.azzahid.hof.domain.model.Route
import com.azzahid.hof.domain.model.RouteType
import com.azzahid.hof.domain.state.FileSystemRouteUiState
import com.azzahid.hof.services.FilePermissionService
import io.ktor.http.HttpMethod
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.util.UUID

class FileSystemRouteBuilderViewModel(
    private val filePermissionService: FilePermissionService,
    private val routeRepository: RouteRepository
) : ViewModel() {
    private val _uiState = MutableStateFlow(FileSystemRouteUiState())
    val uiState: StateFlow<FileSystemRouteUiState> = _uiState.asStateFlow()

    fun updatePath(path: String) {
        val cleanPath = if (path.startsWith("/")) path else "/$path"
        _uiState.value = _uiState.value.copy(path = cleanPath, isPathAutoGenerated = false)
        validateForm()
    }

    fun updateShareName(name: String) {
        val currentState = _uiState.value
        val newPath = if (currentState.isPathAutoGenerated && name.isNotBlank()) {
            "/${name.lowercase().replace(Regex("[^a-z0-9.]"), "-").replace(Regex("-+"), "-")}"
        } else {
            currentState.path
        }
        _uiState.value = currentState.copy(shareName = name, path = newPath)
        validateForm()
    }

    fun updateRespectIndexHtml(respect: Boolean) {
        _uiState.value = _uiState.value.copy(respectIndexHtml = respect)
    }

    fun addSelectedFile(uri: Uri) {
        val newSelection = filePermissionService.processSelectedFiles(listOf(uri)).firstOrNull()
        newSelection?.let { file ->
            val shareName = file.displayName
            val path = "/${
                shareName.lowercase().replace(Regex("[^a-z0-9.]"), "-").replace(Regex("-+"), "-")
            }"
            _uiState.value = _uiState.value.copy(
                selectedFile = file,
                shareName = shareName,
                path = path,
                isPathAutoGenerated = true
            )
            validateForm()
        }
    }

    fun addSelectedDirectory(uri: Uri) {
        val newSelection = filePermissionService.processSelectedDirectory(uri)
        val shareName = newSelection.displayName
        val path =
            "/${shareName.lowercase().replace(Regex("[^a-z0-9.]"), "-").replace(Regex("-+"), "-")}"
        _uiState.value = _uiState.value.copy(
            selectedFile = newSelection,
            shareName = shareName,
            path = path,
            isPathAutoGenerated = true
        )
        validateForm()
    }

    fun removeSelectedFile() {
        _uiState.value = FileSystemRouteUiState()
        validateForm()
    }

    private fun validateForm() {
        val state = _uiState.value
        val isValid = state.shareName.isNotBlank() && state.selectedFile != null
        _uiState.value = state.copy(isValid = isValid)
    }

    fun createRoutes(): List<Route> {
        return if (_uiState.value.isValid) {
            val state = _uiState.value
            val selectedFile = state.selectedFile ?: return emptyList()

            val itemPath = state.path.ifBlank {
                val generatedPath = state.shareName.lowercase().replace(" ", "-")
                "/$generatedPath"
            }

            val route = Route(
                id = UUID.randomUUID().toString(),
                description = state.shareName,
                path = itemPath,
                method = HttpMethod.Get,
                type = if (selectedFile.isDirectory) {
                    RouteType.Directory(
                        directoryUri = selectedFile.uri.toString(),
                        indexFile = if (state.respectIndexHtml) "index.html" else null
                    )
                } else {
                    RouteType.StaticFile(fileUri = selectedFile.uri.toString())
                }
            )

            listOf(route)
        } else emptyList()
    }

    fun saveRoute(onSuccess: () -> Unit, onError: (String) -> Unit) {
        if (!_uiState.value.isValid) {
            onError("Please select a file and provide a share name")
            return
        }

        val routes = createRoutes()
        if (routes.isEmpty()) {
            onError("Failed to create route")
            return
        }

        viewModelScope.launch {
            try {
                routeRepository.insertRoute(routes.first())
                clearForm()
                onSuccess()
            } catch (e: Exception) {
                onError("Failed to save route: ${e.message}")
            }
        }
    }

    fun clearForm() {
        _uiState.value = FileSystemRouteUiState()
    }
}